# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'yaml'
vars = YAML.load_file('depvars.yml')

Vagrant.configure("2") do |vmconf|
  vmconf.vm.box = "ubuntu/bionic64"
  vmconf.vm.define "halb" do |halb|
    halb.vm.network :private_network, ip: vars['subnet'] + '100'
    halb.vm.hostname = "halb"
    halb.ssh.forward_agent = true
    halb.vm.network :forwarded_port, guest: 22, host: vars['sshportPoint'] + 10, id: "ssh"
    halb.vm.provider :virtualbox do |v1|
      v1.customize ["modifyvm", :id, "--name", "halb", "--memory", "1024", "--cpus", "1"]
    end
    halb.vm.provision "shell", path: "scripts/globalscript.sh"
    halb.vm.provision :reload
    halb.vm.provision "shell", path: "scripts/configureHA.sh", args: [vars['subnet']]
  end

  vmconf.vm.define "etcd" do |etcd|
    etcd.vm.network :private_network, ip: vars['subnet'] + '21'
    etcd.vm.hostname = "etcd"
    etcd.ssh.forward_agent = true
    etcd.vm.network :forwarded_port, guest: 22, host: vars['sshportPoint'] + 11, id: "ssh"
    etcd.vm.provider :virtualbox do |v1|
      v1.customize ["modifyvm", :id, "--name", "etcd", "--memory", "1024", "--cpus", "2"]
    end
    etcd.vm.provision "shell", path: "scripts/globalscript.sh"
    etcd.vm.provision :reload
    etcd.vm.provision "shell", path: "scripts/configureETCD.sh", args: [vars['subnet']]
  end

  (1..3).each do |i|
     vmconf.vm.define "pg#{i}" do |pgconfig|
       #pgconfig.vm.synced_folder "./public_html/app", "/var/www/public_html/core.prospectsmb.com/", type: "nfs"
       pgconfig.vm.network :private_network, ip: vars['subnet'] + "1#{i}"
       pgconfig.vm.hostname = "pg#{i}"
       pgconfig.ssh.forward_agent = true
       pgconfig.vm.network :forwarded_port, guest: 22, host: vars['sshportPoint'] + i, id: "ssh"
       pgconfig.vm.provider :virtualbox do |v1|
         v1.customize ["modifyvm", :id, "--name", "pg#{i}", "--memory", "1024", "--cpus", "1"]
       end
       pgconfig.vm.provision "shell", path: "scripts/globalscript.sh", args: pgconfig.vm.hostname
       pgconfig.vm.provision :reload
       pgconfig.vm.provision "shell", path: "scripts/configurePatroni.sh", args: [vars['subnet'], "1#{i}"]
     end
  end
end
